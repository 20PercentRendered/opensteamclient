#ifndef ICLIENTUSER_H
#define ICLIENTUSER_H
#ifndef _WIN32
#pragma once
#endif

#include "SteamTypes.h"
#include "UserCommon.h"

abstract_class UNSAFE_INTERFACE IClientUser
{
public:
     virtual void Unknown_5360000() = 0; //args: -1, index: 0
     virtual void LogOn() = 0; //args: 2, index: 1
     virtual void InvalidateCredentials() = 0; //args: 0, index: 2
     virtual void LogOff() = 0; //args: 0, index: 3
     virtual void BLoggedOn() = 0; //args: 0, index: 4
     virtual void GetLogonState() = 0; //args: 0, index: 5
     virtual void BConnected() = 0; //args: 0, index: 6
     virtual void BInitiateReconnect() = 0; //args: 0, index: 7
     virtual void EConnect() = 0; //args: 0, index: 8
     virtual void BTryingToLogin() = 0; //args: 0, index: 9
     virtual void GetSteamID() = 0; //args: 1, index: 10
     virtual void GetConsoleSteamID() = 0; //args: 1, index: 11
     virtual void GetClientInstanceID() = 0; //args: 0, index: 12
     virtual void IsVACBanned() = 0; //args: 1, index: 13
     virtual void SetEmail() = 0; //args: 1, index: 14
     virtual void SetConfigString() = 0; //args: 3, index: 15
     virtual void GetConfigString() = 0; //args: 4, index: 16
     virtual void SetConfigInt() = 0; //args: 3, index: 17
     virtual void GetConfigInt() = 0; //args: 3, index: 18
     virtual void SetConfigBinaryBlob() = 0; //args: 3, index: 19
     virtual void GetConfigBinaryBlob() = 0; //args: 3, index: 20
     virtual void DeleteConfigKey() = 0; //args: 2, index: 21
     virtual void GetConfigStoreKeyName() = 0; //args: 4, index: 22
     virtual void InitiateGameConnection() = 0; //args: 8, index: 23
     virtual void InitiateGameConnectionOld() = 0; //args: 10, index: 24
     virtual void TerminateGameConnection() = 0; //args: 2, index: 25
     virtual void TerminateGame() = 0; //args: 2, index: 26
     virtual void SetSelfAsChatDestination() = 0; //args: 1, index: 27
     virtual void IsPrimaryChatDestination() = 0; //args: 0, index: 28
     virtual void RequestLegacyCDKey() = 0; //args: 1, index: 29
     virtual void AckGuestPass() = 0; //args: 1, index: 30
     virtual void RedeemGuestPass() = 0; //args: 1, index: 31
     virtual void GetGuestPassToGiveCount() = 0; //args: 0, index: 32
     virtual void GetGuestPassToRedeemCount() = 0; //args: 0, index: 33
     virtual void GetGuestPassToGiveInfo() = 0; //args: 9, index: 34
     virtual void GetGuestPassToGiveOut() = 0; //args: 1, index: 35
     virtual void GetGuestPassToRedeem() = 0; //args: 1, index: 36
     virtual void GetGuestPassToRedeemInfo() = 0; //args: 7, index: 37
     virtual void GetGuestPassToRedeemSenderName() = 0; //args: 3, index: 38
     virtual void GetNumAppsInGuestPassesToRedeem() = 0; //args: 0, index: 39
     virtual void GetAppsInGuestPassesToRedeem() = 0; //args: 2, index: 40
     virtual void GetCountUserNotifications() = 0; //args: 0, index: 41
     virtual void GetCountUserNotification() = 0; //args: 1, index: 42
     virtual void RequestStoreAuthURL() = 0; //args: 1, index: 43
     virtual void SetLanguage() = 0; //args: 1, index: 44
     virtual void TrackAppUsageEvent() = 0; //args: 3, index: 45
     virtual void RaiseConnectionPriority() = 0; //args: 2, index: 46
     virtual void ResetConnectionPriority() = 0; //args: 1, index: 47
     virtual void BHasCachedCredentials() = 0; //args: 1, index: 48
     virtual void SetAccountNameForCachedCredentialLogin() = 0; //args: 2, index: 49
     virtual void DestroyCachedCredentials() = 0; //args: 1, index: 50
     virtual void GetCurrentWebAuthToken() = 0; //args: 2, index: 51
     virtual void RequestWebAuthToken() = 0; //args: 0, index: 52
     virtual void SetLoginInformation() = 0; //args: 3, index: 53
     virtual void SetTwoFactorCode() = 0; //args: 1, index: 54
     virtual void SetLoginToken() = 0; //args: 2, index: 55
     virtual void GetLoginTokenID() = 0; //args: 0, index: 56
     virtual void ClearAllLoginInformation() = 0; //args: 0, index: 57
     virtual void BEnableEmbeddedClient() = 0; //args: 1, index: 58
     virtual void ResetEmbeddedClient() = 0; //args: 1, index: 59
     virtual void BHasEmbeddedClientToken() = 0; //args: 1, index: 60
     virtual void RequestEmbeddedClientToken() = 0; //args: 1, index: 61
     virtual void AuthorizeNewDevice() = 0; //args: 3, index: 62
     virtual void GetLanguage() = 0; //args: 2, index: 63
     virtual void BIsCyberCafe() = 0; //args: 0, index: 64
     virtual void BIsAcademicAccount() = 0; //args: 0, index: 65
     virtual void BIsPortal2EducationAccount() = 0; //args: 0, index: 66
     virtual void TrackNatTraversalStat() = 0; //args: 1, index: 67
     virtual void TrackSteamUsageEvent() = 0; //args: 3, index: 68
     virtual void TrackSteamGUIUsage() = 0; //args: 1, index: 69
     virtual void SetComputerInUse() = 0; //args: 0, index: 70
     virtual void BIsGameRunning() = 0; //args: 1, index: 71
     virtual void BIsGameWindowReady() = 0; //args: 1, index: 72
     virtual void BUpdateAppOwnershipTicket() = 0; //args: 2, index: 73
     virtual void GetCustomBinariesState() = 0; //args: 3, index: 74
     virtual void RequestCustomBinaries() = 0; //args: 4, index: 75
     virtual void SetCellID() = 0; //args: 1, index: 76
     virtual void GetCellList() = 0; //args: 1, index: 77
     virtual void GetUserBaseFolder() = 0; //args: 0, index: 78
     virtual void GetUserDataFolder() = 0; //args: 3, index: 79
     virtual void GetUserConfigFolder() = 0; //args: 2, index: 80
     virtual void GetAccountName() = 0; //args: 2, index: 81
     virtual void GetAccountName() = 0; //args: 4, index: 82
     virtual void IsPasswordRemembered() = 0; //args: 0, index: 83
     virtual void CheckoutSiteLicenseSeat() = 0; //args: 1, index: 84
     virtual void GetAvailableSeats() = 0; //args: 1, index: 85
     virtual void GetAssociatedSiteName() = 0; //args: 0, index: 86
     virtual void BIsRunningInCafe() = 0; //args: 0, index: 87
     virtual void BAllowCachedCredentialsInCafe() = 0; //args: 0, index: 88
     virtual void RequiresLegacyCDKey() = 0; //args: 2, index: 89
     virtual void GetLegacyCDKey() = 0; //args: 3, index: 90
     virtual void SetLegacyCDKey() = 0; //args: 2, index: 91
     virtual void WriteLegacyCDKey() = 0; //args: 1, index: 92
     virtual void RemoveLegacyCDKey() = 0; //args: 1, index: 93
     virtual void RequestLegacyCDKeyFromApp() = 0; //args: 3, index: 94
     virtual void BIsAnyGameRunning() = 0; //args: 0, index: 95
     virtual void GetSteamGuardDetails() = 0; //args: 0, index: 96
     virtual void GetSentryFileData() = 0; //args: 1, index: 97
     virtual void GetTwoFactorDetails() = 0; //args: 0, index: 98
     virtual void BHasTwoFactor() = 0; //args: 0, index: 99
     virtual void GetEmail() = 0; //args: 3, index: 100
     virtual void Test_FakeConnectionTimeout() = 0; //args: 0, index: 101
     virtual void RunInstallScript() = 0; //args: 3, index: 102
     virtual void IsInstallScriptRunning() = 0; //args: 0, index: 103
     virtual void GetInstallScriptState() = 0; //args: 4, index: 104
     virtual void StopInstallScript() = 0; //args: 1, index: 105
     virtual void SpawnProcess() = 0; //args: 9, index: 106
     virtual void GetAppOwnershipTicketLength() = 0; //args: 1, index: 107
     virtual void GetAppOwnershipTicketData() = 0; //args: 3, index: 108
     virtual void GetAppOwnershipTicketExtendedData() = 0; //args: 7, index: 109
     virtual void GetMarketingMessageCount() = 0; //args: 0, index: 110
     virtual void GetMarketingMessage() = 0; //args: 5, index: 111
     virtual void MarkMarketingMessageSeen() = 0; //args: 2, index: 112
     virtual void CheckForPendingMarketingMessages() = 0; //args: 0, index: 113
     virtual void GetAuthSessionTicket() = 0; //args: 3, index: 114
     virtual void GetAuthSessionTicketV2() = 0; //args: 4, index: 115
     virtual void BeginAuthSession() = 0; //args: 4, index: 116
     virtual void EndAuthSession() = 0; //args: 2, index: 117
     virtual void CancelAuthTicket() = 0; //args: 1, index: 118
     virtual void IsUserSubscribedAppInTicket() = 0; //args: 3, index: 119
     virtual void GetAuthSessionTicketForGameID() = 0; //args: 5, index: 120
     virtual void AdvertiseGame() = 0; //args: 5, index: 121
     virtual void RequestEncryptedAppTicket() = 0; //args: 2, index: 122
     virtual void GetEncryptedAppTicket() = 0; //args: 3, index: 123
     virtual void GetGameBadgeLevel() = 0; //args: 2, index: 124
     virtual void GetPlayerSteamLevel() = 0; //args: 0, index: 125
     virtual void SetAccountLimited() = 0; //args: 1, index: 126
     virtual void BIsAccountLimited() = 0; //args: 0, index: 127
     virtual void SetAccountCommunityBanned() = 0; //args: 1, index: 128
     virtual void BIsAccountCommunityBanned() = 0; //args: 0, index: 129
     virtual void SetLimitedAccountCanInviteFriends() = 0; //args: 1, index: 130
     virtual void BLimitedAccountCanInviteFriends() = 0; //args: 0, index: 131
     virtual void SendValidationEmail() = 0; //args: 0, index: 132
     virtual void BGameConnectTokensAvailable() = 0; //args: 0, index: 133
     virtual void NumGamesRunning() = 0; //args: 0, index: 134
     virtual void GetRunningGameID() = 0; //args: 2, index: 135
     virtual void GetRunningGamePID() = 0; //args: 1, index: 136
     virtual void RaiseWindowForGame() = 0; //args: 1, index: 137
     virtual void GetAccountSecurityPolicyFlags() = 0; //args: 0, index: 138
     virtual void SetClientStat() = 0; //args: 6, index: 139
     virtual void VerifyPassword() = 0; //args: 1, index: 140
     virtual void BSupportUser() = 0; //args: 0, index: 141
     virtual void BNeedsSSANextSteamLogon() = 0; //args: 0, index: 142
     virtual void ClearNeedsSSANextSteamLogon() = 0; //args: 0, index: 143
     virtual void BIsAppOverlayEnabled() = 0; //args: 1, index: 144
     virtual void BOverlayIgnoreChildProcesses() = 0; //args: 1, index: 145
     virtual void SetOverlayState() = 0; //args: 2, index: 146
     virtual void NotifyOverlaySettingsChanged() = 0; //args: 0, index: 147
     virtual void BIsBehindNAT() = 0; //args: 0, index: 148
     virtual void GetMicroTxnAppID() = 0; //args: 2, index: 149
     virtual void GetMicroTxnOrderID() = 0; //args: 2, index: 150
     virtual void BGetMicroTxnPrice() = 0; //args: 6, index: 151
     virtual void GetMicroTxnSteamRealm() = 0; //args: 2, index: 152
     virtual void GetMicroTxnLineItemCount() = 0; //args: 2, index: 153
     virtual void BGetMicroTxnLineItem() = 0; //args: 11, index: 154
     virtual void BIsSandboxMicroTxn() = 0; //args: 3, index: 155
     virtual void BMicroTxnRequiresCachedPmtMethod() = 0; //args: 3, index: 156
     virtual void AuthorizeMicroTxn() = 0; //args: 3, index: 157
     virtual void BGetWalletBalance() = 0; //args: 3, index: 158
     virtual void RequestMicroTxnInfo() = 0; //args: 2, index: 159
     virtual void BMicroTxnRefundable() = 0; //args: 2, index: 160
     virtual void BGetAppMinutesPlayed() = 0; //args: 3, index: 161
     virtual void GetAppLastPlayedTime() = 0; //args: 1, index: 162
     virtual void GetAppUpdateDisabledSecondsRemaining() = 0; //args: 1, index: 163
     virtual void BGetGuideURL() = 0; //args: 3, index: 164
     virtual void BPromptToChangePassword() = 0; //args: 0, index: 165
     virtual void BAccountExtraSecurity() = 0; //args: 0, index: 166
     virtual void BAccountShouldShowLockUI() = 0; //args: 0, index: 167
     virtual void GetCountAuthedComputers() = 0; //args: 0, index: 168
     virtual void GetSteamGuardEnabledTime() = 0; //args: 0, index: 169
     virtual void SetPhoneIsVerified() = 0; //args: 1, index: 170
     virtual void BIsPhoneVerified() = 0; //args: 0, index: 171
     virtual void SetPhoneIsIdentifying() = 0; //args: 1, index: 172
     virtual void BIsPhoneIdentifying() = 0; //args: 0, index: 173
     virtual void SetPhoneIsRequiringVerification() = 0; //args: 1, index: 174
     virtual void BIsPhoneRequiringVerification() = 0; //args: 0, index: 175
     virtual void ChangeTwoFactorAuthOptions() = 0; //args: 1, index: 176
     virtual void Set2ndFactorAuthCode() = 0; //args: 2, index: 177
     virtual void SetUserMachineName() = 0; //args: 1, index: 178
     virtual void GetUserMachineName() = 0; //args: 2, index: 179
     virtual void GetEmailDomainFromLogonFailure() = 0; //args: 2, index: 180
     virtual void GetAgreementSessionUrl() = 0; //args: 0, index: 181
     virtual void GetDurationControl() = 0; //args: 0, index: 182
     virtual void GetDurationControlForApp() = 0; //args: 1, index: 183
     virtual void BSetDurationControlOnlineState() = 0; //args: 1, index: 184
     virtual void BSetDurationControlOnlineStateForApp() = 0; //args: 2, index: 185
     virtual void BGetDurationControlExtendedResults() = 0; //args: 3, index: 186
     virtual void BIsSubscribedApp() = 0; //args: 1, index: 187
     virtual void GetSubscribedApps() = 0; //args: 3, index: 188
     virtual void RegisterActivationCode() = 0; //args: 1, index: 189
     virtual void AckSystemIM() = 0; //args: 2, index: 190
     virtual void RequestSpecialSurvey() = 0; //args: 1, index: 191
     virtual void SendSpecialSurveyResponse() = 0; //args: 3, index: 192
     virtual void RequestNotifications() = 0; //args: 0, index: 193
     virtual void GetAppOwnershipInfo() = 0; //args: 4, index: 194
     virtual void SendGameWebCallback() = 0; //args: 2, index: 195
     virtual void BIsStreamingUIToRemoteDevice() = 0; //args: 0, index: 196
     virtual void BIsCurrentlyNVStreaming() = 0; //args: 0, index: 197
     virtual void OnBigPictureForStreamingStartResult() = 0; //args: 2, index: 198
     virtual void OnBigPictureForStreamingDone() = 0; //args: 0, index: 199
     virtual void OnBigPictureForStreamingRestarting() = 0; //args: 0, index: 200
     virtual void StopStreaming() = 0; //args: 1, index: 201
     virtual void LockParentalLock() = 0; //args: 0, index: 202
     virtual void UnlockParentalLock() = 0; //args: 1, index: 203
     virtual void BIsParentalLockEnabled() = 0; //args: 0, index: 204
     virtual void BIsParentalLockLocked() = 0; //args: 0, index: 205
     virtual void BlockApp() = 0; //args: 1, index: 206
     virtual void UnblockApp() = 0; //args: 1, index: 207
     virtual void BIsAppBlocked() = 0; //args: 1, index: 208
     virtual void BIsAppInBlockList() = 0; //args: 1, index: 209
     virtual void BlockFeature() = 0; //args: 1, index: 210
     virtual void UnblockFeature() = 0; //args: 1, index: 211
     virtual void BIsFeatureBlocked() = 0; //args: 1, index: 212
     virtual void BIsFeatureInBlockList() = 0; //args: 1, index: 213
     virtual void GetParentalUnlockTime() = 0; //args: 0, index: 214
     virtual void BGetRecoveryEmail() = 0; //args: 2, index: 215
     virtual void RequestParentalRecoveryEmail() = 0; //args: 0, index: 216
     virtual void BIsLockFromSiteLicense() = 0; //args: 0, index: 217
     virtual void BGetSerializedParentalSettings() = 0; //args: 1, index: 218
     virtual void BSetParentalSettings() = 0; //args: 1, index: 219
     virtual void BDisableParentalSettings() = 0; //args: 0, index: 220
     virtual void BGetParentalWebToken() = 0; //args: 2, index: 221
     virtual void GetCommunityPreference() = 0; //args: 1, index: 222
     virtual void SetCommunityPreference() = 0; //args: 2, index: 223
     virtual void GetTextFilterSetting() = 0; //args: 0, index: 224
     virtual void BTextFilterIgnoresFriends() = 0; //args: 0, index: 225
     virtual void CanLogonOffline() = 0; //args: 0, index: 226
     virtual void LogOnOffline() = 0; //args: 1, index: 227
     virtual void ValidateOfflineLogonTicket() = 0; //args: 1, index: 228
     virtual void BGetOfflineLogonTicket() = 0; //args: 2, index: 229
     virtual void UploadLocalClientLogs() = 0; //args: 0, index: 230
     virtual void SetAsyncNotificationEnabled() = 0; //args: 2, index: 231
     virtual void BIsOtherSessionPlaying() = 0; //args: 1, index: 232
     virtual void BKickOtherPlayingSession() = 0; //args: 0, index: 233
     virtual void BIsAccountLockedDown() = 0; //args: 0, index: 234
     virtual void ClearAndSetAppTags() = 0; //args: 2, index: 235
     virtual void RemoveAppTag(AppId_t, const char* tag) = 0; //args: 2, index: 236
     virtual void AddAppTag(AppId_t, const char* tag) = 0; //args: 2, index: 237
     virtual void ClearAppTags(AppId_t) = 0; //args: 1, index: 238
     virtual void SetAppHidden(AppId_t, bool) = 0; //args: 2, index: 239
     virtual void RequestAccountLinkInfo() = 0; //args: 0, index: 240
     virtual void RequestSurveySchedule() = 0; //args: 0, index: 241
     virtual void RequestNewSteamAnnouncementState() = 0; //args: 0, index: 242
     virtual void UpdateSteamAnnouncementLastRead() = 0; //args: 3, index: 243
     virtual void GetMarketEligibility() = 0; //args: 0, index: 244
     virtual void UpdateGameVrDllState() = 0; //args: 3, index: 245
     virtual void KillVRTheaterPancakeGame() = 0; //args: 1, index: 246
     virtual void BIsAnyGameOrServiceAppRunning() = 0; //args: 0, index: 247
     virtual void BGetAppPlaytimeMap() = 0; //args: 1, index: 248
     virtual void BGetAppsLastPlayedMap() = 0; //args: 1, index: 249
     virtual void BGetAppTagsMap() = 0; //args: 1, index: 250
     virtual void SendSteamServiceStatusUpdate() = 0; //args: 2, index: 251
     virtual void RequestSteamGroupChatMessageNotifications() = 0; //args: 5, index: 252
     virtual void RequestSteamGroupChatMessageHistory() = 0; //args: 5, index: 253
     virtual void RequestSendSteamGroupChatMessage() = 0; //args: 6, index: 254
     virtual void OnNewGroupChatMsgAdded() = 0; //args: 8, index: 255
     virtual void OnGroupChatUserStateChange() = 0; //args: 4, index: 256
     virtual void OnReceivedGroupChatSubscriptionResponse() = 0; //args: 5, index: 257
     virtual void GetTimedTrialStatus() = 0; //args: 3, index: 258
     virtual void RequestTimedTrialStatus() = 0; //args: 1, index: 259
     virtual void PrepareForSystemSuspend() = 0; //args: 0, index: 260
     virtual void ResumeSuspendedGames() = 0; //args: 1, index: 261
     virtual void GetClientInstallationID() = 0; //args: 0, index: 262
     virtual void Test_SetClientInstallationID() = 0; //args: 2, index: 263
     virtual void GetAppIDForGameID() = 0; //args: 1, index: 264
     virtual void BDoNotDisturb() = 0; //args: 0, index: 265
     virtual void SetAdditionalClientArgData() = 0; //args: 1, index: 266
};
#endif // ICLIENTUSER_H
